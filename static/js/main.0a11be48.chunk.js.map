{"version":3,"sources":["views/Navbar.tsx","Api.ts","views/ScpForm.tsx","pages/AddScp.tsx","pages/ExploreScpEntries.tsx","pages/AboutScp.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Navbar","location","useLocation","NavLink","_ref","path","label","react_default","a","createElement","react_router_dom_dist","style","paddingLeft","color","textDecoration","pathname","to","relative","AppBar","position","Toolbar","sx","backgroundColor","Box","width","display","flexDirection","alignItems","justifyContent","Typography","variant","Hidden","smDown","marginLeft","crudCrudUrl","apiKey","loadApiKey","fetch","method","headers","Content-Type","then","res","body","text","responseAsText","endpointUrlElement","DOMParser","parseFromString","querySelector","innerHTML","trim","split","tag","payload","undefined","error","catch","postScpEntry","newScpEntry","requestOptions","JSON","stringify","concat","response","status","json","entry","updateScpEntry","_id","scpNumber","name","description","deleteScpEntry","scpEntryId","postTestData","Promise","all","testData","map","ScpForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleScpNumberChange","event","setState","target","value","handleNameChange","handleDescriptionChange","save","validatedScp","validateForm","state","hasValidationErrors","submitStatus","formType","Api","onSubmitSuccessful","Grid","container","item","xs","md","lg","Card","padding","marginBottom","spacing","TextField","fullWidth","onChange","multiline","rows","Button","onClick","React","Component","AddScp","Container","marginTop","views_ScpForm","ExploreScpEntries","renderScpEntries","scpEntries","CircularProgress","entries","length","renderScpEntry","isBeingEdited","Fragment","key","resetEditing","CardContent","fontSize","gutterBottom","component","whiteSpace","CardActions","size","handleEditClicked","handleDeleteClicked","scpEntry","e","scpId","filter","scpEntryState","_this2","reverse","AboutScp","render","fontWeight","Link","href","rel","App","apiKeyRes","testDataRes","console","log","basename","views_Navbar","dist","element","pages_AboutScp","pages_ExploreScpEntries","pages_AddScp","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","StrictMode","src_App"],"mappings":"8RA8DeA,MAzDf,WACE,IAAMC,EAAWC,cAEXC,EAAU,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAMC,EAATF,EAASE,MAAT,OACdC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,MAAO,CACLC,YAAa,OACbC,MAAO,QACPC,eAAgBb,EAASc,WAAaV,EAAO,YAAc,QAE7DQ,MAAM,UACNG,GAAIX,EACJY,SAAS,QAERX,IAIL,OACEC,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAQC,SAAS,UAEfZ,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAASC,GAAI,CAAEC,gBAAiB,SAC9Bf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CACEF,GAAI,CACFG,MAAO,OACPC,QAAS,OACTC,cAAe,MACfC,WAAY,SACZC,eAAgB,kBAGlBrB,EAAAC,EAAAC,cAACc,EAAA,EAAD,CACEF,GAAI,CACFI,QAAS,OACTC,cAAe,MACfC,WAAY,aAGdpB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAYC,QAAQ,MAApB,OAA0C,IAE1CvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAQC,QAAM,GACZzB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAYC,QAAQ,YAAYG,WAAW,SAA3C,oCAKJ1B,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAKF,GAAI,CAAEI,QAAS,OAAQC,cAAe,QACzCnB,EAAAC,EAAAC,cAACN,EAAD,CAASE,KAAK,IAAIC,MAAM,WACxBC,EAAAC,EAAAC,cAACN,EAAD,CAASE,KAAK,WAAWC,MAAM,aAC/BC,EAAAC,EAAAC,cAACN,EAAD,CAASE,KAAK,OAAOC,MAAM,2GC3CjC4B,EAAc,wBAGhBC,EAAS,GAKAC,EAAa,WAMxB,OAAOC,MAAMH,EALU,CACrBI,OAAQ,MACRC,QAAS,CAAEC,eAAgB,eAI1BC,KAAK,SAACC,GACL,OAAIA,EAAIC,KACCD,EAAIE,OAAOH,KAAK,SAACI,GACtB,IAKMC,GALS,IAAIC,WACSC,gBAC1BH,EACA,aAEsCI,cACtC,iBAKF,OAHAd,EAASW,EACLA,EAAmBI,UAAUC,OAAOC,MAAM,SAAS,GACnD,GACG,CAAEC,IAAK,UAAWC,aAASC,KAG7B,CAAEF,IAAK,UAAWG,MAAO,gBAGnCC,MAAM,iBAAO,CAAEJ,IAAK,UAAWG,MAAO,iBAG9BE,EAAe,SAC1BC,GAEA,IAAMC,EAAiB,CACrBtB,OAAQ,OACRC,QAAS,CAAEC,eAAgB,oBAC3BG,KAAMkB,KAAKC,UAAUH,IAGvB,OACEtB,MAAK,GAAA0B,OAAI7B,EAAJ,QAAA6B,OAAsB5B,EAAtB,QAAoCyB,GAEtCnB,KAAK,SAACuB,GACL,OAAIA,EAASC,QAAU,IACd,CAAEZ,IAAK,UAAWG,MAAO,cAIzBQ,EACJE,OACAzB,KACC,SAAC0B,GAAD,MACG,CAAEd,IAAK,UAAWC,QAASa,OAIrCV,MAAM,iBAAO,CAAEJ,IAAK,UAAWG,MAAO,iBAIhCY,EAAiB,SAAAhE,GAKc,IAJ1CiE,EAI0CjE,EAJ1CiE,IACAC,EAG0ClE,EAH1CkE,UACAC,EAE0CnE,EAF1CmE,KACAC,EAC0CpE,EAD1CoE,YAEMZ,EAAiB,CACrBtB,OAAQ,MACRC,QAAS,CAAEC,eAAgB,oBAC3BG,KAAMkB,KAAKC,UAAU,CAAEQ,YAAWC,OAAMC,iBAG1C,OAAOnC,MAAK,GAAA0B,OAAI7B,EAAJ,QAAA6B,OAAsB5B,EAAtB,SAAA4B,OAAoCM,GAAOT,GACpDnB,KAAK,SAACuB,GACL,OAAIA,EAASC,QAAU,IACd,CAAEZ,IAAK,UAAWG,MAAO,cAEzB,CAAEH,IAAK,UAAWC,aAASC,KAGrCE,MAAM,iBAAO,CAAEJ,IAAK,UAAWG,MAAO,iBAG9BiB,EAAiB,SAC5BC,GAOA,OAAOrC,MAAK,GAAA0B,OAAI7B,EAAJ,QAAA6B,OAAsB5B,EAAtB,QAAA4B,OAAmCW,GALxB,CACrBpC,OAAQ,SACRC,QAAS,CAAEC,eAAgB,sBAI1BC,KAAK,iBAAO,CAAEY,IAAK,UAAWC,aAASC,KACvCE,MAAM,iBAAO,CAAEJ,IAAK,UAAWG,MAAO,iBA+B9BmB,EAAe,WAC1B,OAAOC,QAAQC,IAAIC,EAASC,IAAIrB,IAC7BjB,KACC,iBACG,CACCY,IAAK,UACLC,aAASC,KAGdE,MAAM,iBAAO,CAAEJ,IAAK,UAAWG,MAAO,iBAGrCsB,EAAuB,CAC3B,CACER,UAAW,OACXC,KAAM,mBACNC,YACE,g8BAEJ,CACEF,UAAW,OACXC,KAAM,uBACNC,YACE,ktCAEJ,CACEF,UAAW,OACXC,KAAM,cACNC,YACE,ykBAEJ,CACEF,UAAW,MACXC,KAAM,eACNC,YACE,+ZAEJ,CACEF,UAAW,OACXC,KAAM,UACNC,YACE,miBCWSQ,cAvKb,SAAAA,EAAYC,GAAqB,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAC/BE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAoBAQ,sBAAwB,SAC9BC,GAD8B,OAE3BR,EAAKS,SAAS,CAAErB,UAAWoB,EAAME,OAAOC,SAvBZX,EAyBzBY,iBAAuC,SAC7CJ,GAD6C,OAE1CR,EAAKS,SAAS,CAAEpB,KAAMmB,EAAME,OAAOC,SA3BPX,EA6BzBa,wBAA8C,SACpDL,GADoD,OAEjDR,EAAKS,SAAS,CAAEnB,YAAakB,EAAME,OAAOC,SA/BdX,EAiCzBc,KAAO,WACb,IAAMC,EAAef,EAAKgB,aAAahB,EAAKiB,OAEvB,qBAAjBF,EACFf,EAAKS,SAAS,CAAES,qBAAqB,KAErClB,EAAKS,SAAS,CAAEU,aAAc,gBAGA,wBAA5BnB,EAAKD,MAAMqB,SAASjD,IAChBkD,EACAA,GAESN,GAAcxD,KAAK,SAACuB,GACZ,YAAjBA,EAASX,KACX6B,EAAKS,SAAS,CACZU,aAAc,mBACd/B,UAAW,KACXC,KAAM,KACNC,YAAa,KACb4B,qBAAqB,IAGnBlB,EAAKD,MAAMuB,oBAEbtB,EAAKD,MAAMuB,mBAAmBP,IAGhCf,EAAKS,SAAS,CAAEU,aAAc,qBA7DLnB,EAmEzBgB,aAAe,SAAA9F,GAAA,IACrBiE,EADqBjE,EACrBiE,IACAC,EAFqBlE,EAErBkE,UACAC,EAHqBnE,EAGrBmE,KACAC,EAJqBpE,EAIrBoE,YAJqB,OAMrBF,GAAaC,GAAQC,EACjB,CAAEH,MAAKC,YAAWC,OAAMC,eAExB,oBA1EJU,EAAKiB,MACoB,wBAAvBlB,EAAMqB,SAASjD,IACX,CACEgB,IAAKY,EAAMqB,SAASnC,MAAME,IAC1BC,UAAWW,EAAMqB,SAASnC,MAAMG,UAChCC,KAAMU,EAAMqB,SAASnC,MAAMI,KAC3BC,YAAaS,EAAMqB,SAASnC,MAAMK,YAClC6B,aAAc,eACdD,qBAAqB,GAEvB,CACE9B,UAAW,KACXC,KAAM,KACNC,YAAa,KACb6B,aAAc,eACdD,qBAAqB,GAjBElB,wEA+E/B,OACE3E,EAAAC,EAAAC,cAACgG,EAAA,EAAD,CAAMC,WAAS,EAACrF,GAAI,CAAEO,eAAgB,WACpCrB,EAAAC,EAAAC,cAACgG,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC5BvG,EAAAC,EAAAC,cAACsG,EAAA,EAAD,CAAMjF,QAAQ,WAAWT,GAAI,CAAE2F,QAAS,SACtCzG,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAYC,QAAQ,KAAKmF,aAAa,QACP,wBAA5B5B,KAAKJ,MAAMqB,SAASjD,IACjB,kBACA,4BAEN9C,EAAAC,EAAAC,cAACgG,EAAA,EAAD,CAAMC,WAAS,EAACQ,QAAQ,QACtB3G,EAAAC,EAAAC,cAACgG,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IAEbrG,EAAAC,EAAAC,cAAC0G,EAAA,EAAD,CACEC,WAAS,EACT9G,MAAM,aACNwB,QAAQ,WACRuF,SAAUhC,KAAKI,sBACfI,MAAOR,KAAKc,MAAM7B,WAAa,MAGnC/D,EAAAC,EAAAC,cAACgG,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACbrG,EAAAC,EAAAC,cAAC0G,EAAA,EAAD,CACEC,WAAS,EACT9G,MAAM,OACNwB,QAAQ,WACRuF,SAAUhC,KAAKS,iBACfD,MAAOR,KAAKc,MAAM5B,MAAQ,MAG9BhE,EAAAC,EAAAC,cAACgG,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACbrG,EAAAC,EAAAC,cAAC0G,EAAA,EAAD,CACEC,WAAS,EACT9G,MAAM,cACNwB,QAAQ,WACRwF,WAAS,EACTC,KAAM,EACNF,SAAUhC,KAAKU,wBACfF,MAAOR,KAAKc,MAAM3B,aAAe,MAGrCjE,EAAAC,EAAAC,cAACgG,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACbrG,EAAAC,EAAAC,cAAC+G,EAAA,EAAD,CAAQ1F,QAAQ,WAAW2F,QAASpC,KAAKW,MAAzC,UAIFzF,EAAAC,EAAAC,cAACgG,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACbrG,EAAAC,EAAAC,cAACc,EAAA,EAAD,CACEF,GAAI,CACFC,gBAAiB,mBACjB0F,QAAS,OACTvF,QAAS4D,KAAKc,MAAMC,oBAAsB,OAAS,SAJvD,+DASA7F,EAAAC,EAAAC,cAACc,EAAA,EAAD,CACEF,GAAI,CACFC,gBAAiB,mBACjB0F,QAAS,OACTvF,QAC8B,iBAA5B4D,KAAKc,MAAME,aACP,OACA,SAPV,qBAYA9F,EAAAC,EAAAC,cAACc,EAAA,EAAD,CACEF,GAAI,CACFC,gBAAiB,mBACjB0F,QAAS,OACTvF,QAC8B,qBAA5B4D,KAAKc,MAAME,aACP,OACA,SAPV,oCAnJMqB,IAAMC,WCTbC,cAbb,SAAAA,EAAY3C,GAAY,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAuC,GAAAzC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyC,GAAApC,KAAAH,KAChBJ,0EAIN,OACE1E,EAAAC,EAAAC,cAACoH,EAAA,EAAD,CAAWxG,GAAI,CAAEyG,UAAW,SAC1BvH,EAAAC,EAAAC,cAACsH,EAAD,CAASzB,SAAU,CAAEjD,IAAK,yBARbqE,IAAMC,sCCyNZK,cApMb,SAAAA,EAAY/C,GAAW,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2C,IACrB9C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6C,GAAAxC,KAAAH,KAAMJ,KAiCAgD,iBAAmB,SACzBC,GAEA,OAAQA,EAAW7E,KACjB,IAAK,eACH,OAAO9C,EAAAC,EAAAC,cAAA,kBACT,IAAK,UACH,OACEF,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAKyF,QAAQ,QACXzG,EAAAC,EAAAC,cAAC0H,EAAA,EAAD,OAGN,IAAK,SACH,OAAkC,IAA9BD,EAAWE,QAAQC,OAEnB9H,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAYC,QAAQ,MAApB,+CAMAvB,EAAAC,EAAAC,cAACgG,EAAA,EAAD,CACEC,WAAS,EACTQ,QAAS,CAAEN,GAAI,EAAGC,GAAI,GACtBxF,GAAI,CAAEO,eAAgB,WAErBsG,EAAWE,QAAQrD,IAAIG,EAAKoD,iBAIrC,IAAK,QACH,MAAyB,mBAArBJ,EAAW1E,MAEXjD,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAYC,QAAQ,MAApB,0CAMAvB,EAAAC,EAAAC,cAACc,EAAA,EAAD,CACEF,GAAI,CACFC,gBAAiB,mBACjB0F,QAAS,SAGXzG,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAYC,QAAQ,MAApB,wBA/EWoD,EAsFfoD,eAAiB,SAAAlI,GAGS,IAFhC+D,EAEgC/D,EAFhC+D,MAGA,OADgC/D,EADhCmI,cAIIhI,EAAAC,EAAAC,cAACF,EAAAC,EAAMgI,SAAP,CAAgBC,IAAKtE,EAAME,KACzB9D,EAAAC,EAAAC,cAACgG,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACbrG,EAAAC,EAAAC,cAACsH,EAAD,CACEzB,SAAU,CAAEjD,IAAK,sBAAuBc,MAAOA,GAC/CqC,mBAAoBtB,EAAKwD,iBAO/BnI,EAAAC,EAAAC,cAACF,EAAAC,EAAMgI,SAAP,CAAgBC,IAAKtE,EAAME,KACzB9D,EAAAC,EAAAC,cAACgG,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC5BvG,EAAAC,EAAAC,cAACsG,EAAA,EAAD,CAAMjF,QAAQ,WAAWT,GAAI,CAAE2F,QAAS,SACtCzG,EAAAC,EAAAC,cAACkI,EAAA,EAAD,KACEpI,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CACER,GAAI,CAAEuH,SAAU,IAChB/H,MAAM,iBACNgI,cAAY,GAEX,OAAS1E,EAAMG,WAElB/D,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAYC,QAAQ,KAAKgH,UAAU,OAChC3E,EAAMI,MAEThE,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CACER,GAAI,CACFyG,UAAW,OACXiB,WAAY,aAGb5E,EAAMK,cAGXjE,EAAAC,EAAAC,cAACuI,EAAA,EAAD,KACEzI,EAAAC,EAAAC,cAAC+G,EAAA,EAAD,CACEyB,KAAK,QAELxB,QAAS,kBAAMvC,EAAKgE,kBAAkB/E,EAAME,KAAO,MAHrD,YAOA9D,EAAAC,EAAAC,cAAC+G,EAAA,EAAD,CACEyB,KAAK,QAELxB,QAAS,kBAAMvC,EAAKiE,oBAAoBhF,EAAME,KAAO,MAHvD,gBAtISa,EAqJfwD,aAAe,SAACU,GACC,WAAnBlE,EAAKiB,MAAM9C,KACb6B,EAAKS,SAAS,CACZtC,IAAK,SACL+E,QAASlD,EAAKiB,MAAMiC,QAAQrD,IAAI,SAACsE,GAAD,OAC9BA,EAAElF,MAAME,MAAQ+E,EAAS/E,IACrB,CACEF,MAAOiF,EACPb,eAAe,GAEjBc,OA/JWnE,EAqKfgE,kBAAoB,SAACI,GACJ,WAAnBpE,EAAKiB,MAAM9C,KACb6B,EAAKS,SAAS,CACZtC,IAAK,SACL+E,QAASlD,EAAKiB,MAAMiC,QAAQrD,IAAI,SAACsE,GAAD,OAC9BA,EAAElF,MAAME,MAAQiF,EACZ,CACEnF,MAAOkF,EAAElF,MACToE,eAAe,GAEjBc,OA/KWnE,EAsLfiE,oBAAsB,SAACG,GAC7B/C,EAAmB+C,GAAO7G,KAAK,WACN,WAAnByC,EAAKiB,MAAM9C,KACb6B,EAAKS,SAAS,CACZtC,IAAK,SACL+E,QAASlD,EAAKiB,MAAMiC,QAAQmB,OAC1B,SAACC,GAAD,OAAmBA,EAAcrF,MAAME,MAAQiF,SA1LvDpE,EAAKiB,MAAQ,CAAE9C,IAAK,gBAFC6B,mFAKH,IAAAuE,EAAApE,KAClBA,KAAKM,SAAS,CAAEtC,IAAK,YH0FhBhB,MAAK,GAAA0B,OAAI7B,EAAJ,QAAA6B,OAAsB5B,EAAtB,QALW,CACrBG,OAAQ,MACRC,QAAS,CAAEC,eAAgB,sBAI1BC,KAAK,SAACuB,GAAD,OACJA,EAASE,OAAOzB,KAEd,SAAC2F,GAAD,MACG,CACC/E,IAAK,UACLC,QAAS8E,EAAQsB,eAIxBjG,MAAM,SAAC4F,GAEN,MAAS,8DAALA,EACK,CAAEhG,IAAK,UAAWG,MAAO,kBAEzB,CAAEH,IAAK,UAAWG,MAAO,gBGxGhBf,KAAK,SAACuB,GACH,YAAjBA,EAASX,IACXoG,EAAK9D,SAAS,CACZtC,IAAK,SACL+E,QAASpE,EAASV,QAAQyB,IAAI,SAACsE,GAAD,MAAQ,CACpClF,MAAOkF,EACPd,eAAe,OAInBkB,EAAK9D,SAAS,CACZtC,IAAK,QACLG,MAAOQ,EAASR,2CAOtB,OACEjD,EAAAC,EAAAC,cAACoH,EAAA,EAAD,CAAWxG,GAAI,CAAEyG,UAAW,SACzBzC,KAAK4C,iBAAiB5C,KAAKc,eA9BJuB,IAAMC,oBCkGvBgC,6MArHbC,OAAS,WACP,OACErJ,EAAAC,EAAAC,cAACoH,EAAA,EAAD,CACExG,GAAI,CACFyG,UAAW,OACXb,aAAc,SAGhB1G,EAAAC,EAAAC,cAACgG,EAAA,EAAD,CAAMC,WAAS,EAACrF,GAAI,CAAEO,eAAgB,WACpCrB,EAAAC,EAAAC,cAACgG,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC5BvG,EAAAC,EAAAC,cAACsG,EAAA,EAAD,CAAMjF,QAAQ,WAAWT,GAAI,CAAE2F,QAAS,SACtCzG,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAYC,QAAQ,KAAKmF,aAAa,QAAtC,UAGA1G,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CACEC,QAAQ,YACRmF,aAAa,OACb4C,WAAW,OAHb,uBAOAtJ,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAYC,QAAQ,QAAQmF,aAAa,QAAzC,+cASA1G,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAYC,QAAQ,QAAQmF,aAAa,QAAzC,oZAQA1G,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAYC,QAAQ,QAAQmF,aAAa,QAAzC,+VAQA1G,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAYC,QAAQ,QAAQmF,aAAa,QAAzC,mCAGA1G,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CACEC,QAAQ,YACRmF,aAAa,OACb4C,WAAW,OAHb,YAOAtJ,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAYC,QAAQ,QAAQmF,aAAa,QAAzC,kRAMA1G,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CACEC,QAAQ,YACRmF,aAAa,OACb4C,WAAW,OAHb,cAOAtJ,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAYC,QAAQ,QAAQmF,aAAa,QAAzC,wRAOA1G,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CACEC,QAAQ,YACRmF,aAAa,OACb4C,WAAW,OAHb,YAOAtJ,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAYC,QAAQ,QAAQmF,aAAa,QAAzC,mZAQA1G,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAYC,QAAQ,QAAQmF,aAAa,QAAzC,sLAMA1G,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAYC,QAAQ,QAAQmF,aAAa,QAAzC,+FAIA1G,EAAAC,EAAAC,cAACqJ,EAAA,EAAD,CACEC,KAAK,wDACLnE,OAAO,SACPoE,IAAI,aACJ/C,aAAa,QAJf,wFAtGSS,IAAMC,WC4CdsC,MAnCf,WAaE,OAVA1D,IAAiB9D,KAAK,SAACyH,GAAD,MACF,YAAlBA,EAAU7G,IACNkD,IAAmB9D,KAAK,SAAC0H,GAAD,MACF,YAApBA,EAAY9G,IACR+G,QAAQC,IAAI,oBACZD,QAAQC,IAAI,8BAElBD,QAAQC,IAAI,kCAIhB9J,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAe4J,SAAS,WACtB/J,EAAAC,EAAAC,cAAC8J,EAAD,MACAhK,EAAAC,EAAAC,cAAC+J,EAAA,EAAD,KACEjK,EAAAC,EAAAC,cAAC+J,EAAA,EAAD,CAAOnK,KAAK,IAAIoK,QAASlK,EAAAC,EAAAC,cAACiK,EAAD,QACzBnK,EAAAC,EAAAC,cAAC+J,EAAA,EAAD,CAAOnK,KAAK,WAAWoK,QAASlK,EAAAC,EAAAC,cAACkK,EAAD,QAChCpK,EAAAC,EAAAC,cAAC+J,EAAA,EAAD,CAAOnK,KAAK,OAAOoK,QAASlK,EAAAC,EAAAC,cAACmK,EAAD,QAC5BrK,EAAAC,EAAAC,cAAC+J,EAAA,EAAD,CACEnK,KAAK,IACLoK,QACElK,EAAAC,EAAAC,cAACoH,EAAA,EAAD,KACEtH,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAYC,QAAQ,KAAKT,GAAI,CAAE2F,QAAS,SAAxC,iCCvBC6D,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxCC,EAAA3B,EAAA,GAAA5G,KAAAuI,EAAAC,KAAA,WAAqBxI,KAAK,SAAArC,GAAiD,IAA9C8K,EAA8C9K,EAA9C8K,OAAQC,EAAsC/K,EAAtC+K,OAAQC,EAA8BhL,EAA9BgL,OAAQC,EAAsBjL,EAAtBiL,OAAQC,EAAclL,EAAdkL,QAC3DJ,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,MCHDS,IAASC,WACpBC,SAASC,eAAe,SAErB9B,OACHrJ,EAAAC,EAAAC,cAACF,EAAAC,EAAMmL,WAAP,KACEpL,EAAAC,EAAAC,cAACmL,EAAD,QAOJf","file":"static/js/main.0a11be48.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { AppBar, Toolbar, Typography, Box, Hidden } from \"@mui/material\";\nimport { Link, useLocation } from \"react-router-dom\";\n\nfunction Navbar(): JSX.Element {\n  const location = useLocation();\n\n  const NavLink = ({ path, label }: { path: string; label: string }) => (\n    <Link\n      style={{\n        paddingLeft: \"1rem\",\n        color: \"white\",\n        textDecoration: location.pathname === path ? \"underline\" : \"none\",\n      }}\n      color=\"primary\"\n      to={path}\n      relative=\"path\"\n    >\n      {label}\n    </Link>\n  );\n\n  return (\n    <AppBar position=\"static\">\n      {/* <CssBaseline /> */}\n      <Toolbar sx={{ backgroundColor: \"#333\" }}>\n        <Box\n          sx={{\n            width: \"100%\",\n            display: \"flex\",\n            flexDirection: \"row\",\n            alignItems: \"center\",\n            justifyContent: \"space-between\",\n          }}\n        >\n          <Box\n            sx={{\n              display: \"flex\",\n              flexDirection: \"row\",\n              alignItems: \"baseline\",\n            }}\n          >\n            <Typography variant=\"h6\">SFB</Typography>{\" \"}\n            {/* TODO: Hide this if small screen */}\n            <Hidden smDown>\n              <Typography variant=\"subtitle2\" marginLeft=\".5rem\">\n                Säkra, Förvara, Beskydda\n              </Typography>\n            </Hidden>\n          </Box>\n          <Box sx={{ display: \"flex\", flexDirection: \"row\" }}>\n            <NavLink path=\"/\" label=\"Om SFB\"></NavLink>\n            <NavLink path=\"/explore\" label=\"Utforska\"></NavLink>\n            <NavLink path=\"/add\" label=\"Lägg till\"></NavLink>\n          </Box>\n        </Box>\n      </Toolbar>\n    </AppBar>\n  );\n}\n\nexport default Navbar;\n","import { ScpEntry } from \"./types/ScpEntry\";\n\n// This could be replaced by Either in the future https://gcanti.github.io/fp-ts/modules/Either.ts.html\n// If we want to go further, all promises could also be TaskEither instead.\nexport type ApiResponse<T> =\n  | { tag: \"Success\"; payload: T }\n  | { tag: \"Failure\"; error: ApiError };\n\n// TODO: Add more types of error, with more detail.\nexport type ApiError = \"NoEntriesFound\" | \"OtherError\";\n\nconst crudCrudUrl = \"https://crudcrud.com/\";\n\n// Lazy way of storing the api key.\nlet apiKey = \"\";\n\n// Super ugly way of getting a new api key, scraping the crudcrud website.\n// Since crudCrud not only let the free keys live for only 24 hour, but also\n// only let me make 100 calls, it's smoother to just limit the key to the local session.\nexport const loadApiKey = (): Promise<ApiResponse<void>> => {\n  const requestOptions = {\n    method: \"GET\",\n    headers: { \"Content-Type\": \"html/text\" },\n  };\n\n  return fetch(crudCrudUrl, requestOptions)\n    .then((res) => {\n      if (res.body) {\n        return res.text().then((responseAsText) => {\n          const parser = new DOMParser();\n          const htmlDocument = parser.parseFromString(\n            responseAsText,\n            \"text/html\"\n          );\n          const endpointUrlElement = htmlDocument.querySelector(\n            \".endpoint-url\"\n          );\n          apiKey = endpointUrlElement\n            ? endpointUrlElement.innerHTML.trim().split(\"/api/\")[1]\n            : \"\";\n          return { tag: \"Success\", payload: undefined } as ApiResponse<void>;\n        });\n      } else {\n        return { tag: \"Failure\", error: \"OtherError\" } as ApiResponse<void>;\n      }\n    })\n    .catch(() => ({ tag: \"Failure\", error: \"OtherError\" }));\n};\n\nexport const postScpEntry = (\n  newScpEntry: ScpEntry\n): Promise<ApiResponse<ScpEntry>> => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(newScpEntry),\n  };\n\n  return (\n    fetch(`${crudCrudUrl}api/${apiKey}/scp`, requestOptions)\n      // TODO: The response should be decoded.\n      .then((response) => {\n        if (response.status >= 400) {\n          return { tag: \"Failure\", error: \"OtherError\" } as ApiResponse<\n            ScpEntry\n          >;\n        } else {\n          return response\n            .json()\n            .then(\n              (entry) =>\n                ({ tag: \"Success\", payload: entry } as ApiResponse<ScpEntry>)\n            );\n        }\n      })\n      .catch(() => ({ tag: \"Failure\", error: \"OtherError\" }))\n  );\n};\n\nexport const updateScpEntry = ({\n  _id,\n  scpNumber,\n  name,\n  description,\n}: ScpEntry): Promise<ApiResponse<void>> => {\n  const requestOptions = {\n    method: \"PUT\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ scpNumber, name, description }),\n  };\n\n  return fetch(`${crudCrudUrl}api/${apiKey}/scp/${_id}`, requestOptions)\n    .then((response) => {\n      if (response.status >= 400) {\n        return { tag: \"Failure\", error: \"OtherError\" } as ApiResponse<void>;\n      } else {\n        return { tag: \"Success\", payload: undefined } as ApiResponse<void>;\n      }\n    })\n    .catch(() => ({ tag: \"Failure\", error: \"OtherError\" }));\n};\n\nexport const deleteScpEntry = (\n  scpEntryId: string\n): Promise<ApiResponse<void>> => {\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: { \"Content-Type\": \"application/json\" },\n  };\n\n  return fetch(`${crudCrudUrl}api/${apiKey}/scp${scpEntryId}`, requestOptions)\n    .then(() => ({ tag: \"Success\", payload: undefined } as ApiResponse<void>))\n    .catch(() => ({ tag: \"Failure\", error: \"OtherError\" }));\n};\n\nexport const getScpEntries = (): Promise<ApiResponse<ScpEntry[]>> => {\n  const requestOptions = {\n    method: \"GET\",\n    headers: { \"Content-Type\": \"application/json\" },\n  };\n\n  return fetch(`${crudCrudUrl}api/${apiKey}/scp`, requestOptions)\n    .then((response) =>\n      response.json().then(\n        // TODO: The response should be decoded.\n        (entries: ScpEntry[]) =>\n          ({\n            tag: \"Success\",\n            payload: entries.reverse(),\n          } as ApiResponse<ScpEntry[]>)\n      )\n    )\n    .catch((e: unknown) => {\n      // Trying to catch the error we get when the resource has not yet been defined in the backend.\n      if (e == \"TypeError: NetworkError when attempting to fetch resource.\") {\n        return { tag: \"Failure\", error: \"NoEntriesFound\" };\n      } else {\n        return { tag: \"Failure\", error: \"OtherError\" };\n      }\n    });\n};\n\n// Test data for convenience, should be removed in the future.\nexport const postTestData = (): Promise<ApiResponse<void>> => {\n  return Promise.all(testData.map(postScpEntry))\n    .then(\n      () =>\n        ({\n          tag: \"Success\",\n          payload: undefined,\n        } as ApiResponse<void>)\n    )\n    .catch(() => ({ tag: \"Failure\", error: \"OtherError\" }));\n};\n\nconst testData: ScpEntry[] = [\n  {\n    scpNumber: \"3008\",\n    name: \"Oändligt IKEA\",\n    description:\n      \"SFB-3008 är en stor detaljhandelsenhet som tidigare ägts av och märkts som IKEA, en populär möbelkedja. En person som går in i SFB-3008 genom huvudentrén och sedan passerar utom synhåll för dörrarna kommer att bli förflyttad till SFB-3008-1. Denna förskjutning kommer vanligtvis att gå obemärkt förbi eftersom ingen förändring kommer att ske ur offrets perspektiv; de kommer i allmänhet inte att bli medvetna förrän de försöker återvända till ingången.\\n\\nIngången till SFB-3008 ska övervakas hela tiden, och ingen får gå in i SFB-3008 utanför testning, som tillåts av behöriga experter.\\n\\nMänniskor som lämnar SFB-3008 ska kvarhållas och sedan debriefas innan amnestik ges. Beroende på varaktigheten av deras vistelse i SFB-3008, kan en omslagsartikel behöva skapas innan de släpps. Alla andra enheter som lämnar SFB-3008 ska termineras.\",\n  },\n  {\n    scpNumber: \"1005\",\n    name: \"Den målade mannen\",\n    description:\n      'SFB-1005 är en sapient humanoid enhet som består av halvfast blå färg, med exakta nyanser som sträcker sig från nästan vit till djup marin. Ytan på SFB-1005 har en genomsnittlig draghållfasthet på cirka 75 % av den hos mänsklig hud; detta inkluderar dess \"kläder\". SFB-1005 är oförmögen att medvetet kontrollera viskositeten eller formen på sin övergripande form utöver den normala rörelsen hos en humanoid kropp; den kan dock kontrollera sitt yttre skikt till en punkt där den kan välja om dess färg kommer att smetas ut på kontaktytor eller inte. Graden till vilken SFB-1005 kan kontrollera sig själv på ett sådant sätt blir mindre om den överhydratiseras.\\n\\nSFB-1005 är i form av en skallig, mänsklig hane, ca. 1,9 m lång och har visat förmågan att tala med en djup och resonant röst; trots detta har SFB-1005 inget kön i fysisk struktur eller personlig identitet. De skenbara \"kläderna\" är integrerade som i skinn, förutom skjortan vid ärmarna och nederkanten, och byxorna under anklarna. Endast SFB-1005:s skor är helt unika; man tror att de skapades separat från resten av SFB-1005 från början.',\n  },\n  {\n    scpNumber: \"2037\",\n    name: \"Dammkaniner\",\n    description:\n      \"SFB-2037 är en okänd anomal art av Sylvilagus-släktet. Exemplar har ett utseende som liknar arten Sylvilagus audubonii (Desert Cottontail rabbit). SFB-2037 delar också en gemensam diet med andra arter i släktet Sylvilagus. För närvarande har stiftelsen 23 levande SFB-2037-exemplar i inneslutning.\\n\\nProver i dammtillstånd består huvudsakligen av kaninpäls, flingor av död hud, ludd och spindelnät. Ingen levande vävnad kan hittas i dammpartiklarna. I normalt tillstånd upptäcks inga oorganiska ämnen som finns i dammtillståndet.\",\n  },\n  {\n    scpNumber: \"066\",\n    name: \"Eriks leksak\",\n    description:\n      \"SFB-066 är en amorfisk massa av flätat garn och band som väger ungefär ett kilogram. Strängar av SFB-066 kan tas individuellt och manipuleras; när detta är gjort produceras en ton på den diatoniska skalan (C-D-E-F-G-A-B) av objektet.\\n\\nNär en uppsättning av sex eller fler toner produceras kommer SFB-066 att producera en godartad effekt av varierande karaktär och varaktighet.\",\n  },\n  {\n    scpNumber: \"1000\",\n    name: \"Storfot\",\n    description:\n      \"SFB-1000 är en nattaktiv, allätande apa, klassificerad i Hominini-grenen tillsammans med släktena Pan och Homo. Vuxna vuxna varierar i storlek från 1,5 till 3 m (5 till 10 fot) i höjd och väger mellan 90 och 270 kg (200 - 600 lbs). De har grå, brun, svart, röd och ibland vit päls. De har stora ögon med god syn, en uttalad ögonbrynsrygg och en sagittal krön på pannan som liknar gorillans, men finns hos båda könen. Deras intelligens är i nivå med Pan troglodytes (den vanliga schimpansen).\",\n  },\n];\n","import { Box, Button, Card, Grid, TextField, Typography } from \"@mui/material\";\nimport React, { ChangeEventHandler } from \"react\";\nimport * as Api from \"../Api\";\nimport { ScpEntry } from \"../types/ScpEntry\";\n\nexport type FormType =\n  | { tag: \"UpdateExistingEntry\"; entry: ScpEntry }\n  | { tag: \"AddNewEntry\" };\n\ntype ScpFormProps = {\n  formType: FormType;\n  onSubmitSuccessful?: (scpEntry: ScpEntry) => void;\n};\n\ntype ScpFormState = {\n  _id?: string;\n  scpNumber: string | null;\n  name: string | null;\n  description: string | null;\n  submitStatus:\n    | \"NotSubmitted\"\n    | \"Submitting\"\n    | \"SubmitSuccessful\"\n    | \"SubmitFailed\";\n  hasValidationErrors: boolean;\n};\n\nclass ScpForm extends React.Component<ScpFormProps, ScpFormState> {\n  constructor(props: ScpFormProps) {\n    super(props);\n    this.state =\n      props.formType.tag === \"UpdateExistingEntry\"\n        ? {\n            _id: props.formType.entry._id,\n            scpNumber: props.formType.entry.scpNumber,\n            name: props.formType.entry.name,\n            description: props.formType.entry.description,\n            submitStatus: \"NotSubmitted\",\n            hasValidationErrors: false,\n          }\n        : {\n            scpNumber: null,\n            name: null,\n            description: null,\n            submitStatus: \"NotSubmitted\",\n            hasValidationErrors: false,\n          };\n  }\n\n  private handleScpNumberChange = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => this.setState({ scpNumber: event.target.value });\n\n  private handleNameChange: ChangeEventHandler = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => this.setState({ name: event.target.value });\n\n  private handleDescriptionChange: ChangeEventHandler = (\n    event: React.ChangeEvent<HTMLInputElement>\n  ) => this.setState({ description: event.target.value });\n\n  private save = () => {\n    const validatedScp = this.validateForm(this.state);\n\n    if (validatedScp === \"ValidationErrors\") {\n      this.setState({ hasValidationErrors: true });\n    } else {\n      this.setState({ submitStatus: \"Submitting\" });\n\n      const submitFunction =\n        this.props.formType.tag === \"UpdateExistingEntry\"\n          ? Api.updateScpEntry\n          : Api.postScpEntry;\n\n      submitFunction(validatedScp).then((response) => {\n        if (response.tag === \"Success\") {\n          this.setState({\n            submitStatus: \"SubmitSuccessful\",\n            scpNumber: null,\n            name: null,\n            description: null,\n            hasValidationErrors: false,\n          });\n\n          if (this.props.onSubmitSuccessful) {\n            // If the update call responded with the actual entry, we could have used that here.\n            this.props.onSubmitSuccessful(validatedScp);\n          }\n        } else {\n          this.setState({ submitStatus: \"SubmitFailed\" });\n        }\n      });\n    }\n  };\n\n  private validateForm = ({\n    _id,\n    scpNumber,\n    name,\n    description,\n  }: ScpFormState): ScpEntry | \"ValidationErrors\" =>\n    scpNumber && name && description\n      ? { _id, scpNumber, name, description }\n      : // TODO: Create better and more granular error variants\n        \"ValidationErrors\";\n\n  render(): JSX.Element {\n    return (\n      <Grid container sx={{ justifyContent: \"center\" }}>\n        <Grid item xs={12} md={8} lg={8}>\n          <Card variant=\"outlined\" sx={{ padding: \"2rem\" }}>\n            <Typography variant=\"h5\" marginBottom=\"2rem\">\n              {this.props.formType.tag === \"UpdateExistingEntry\"\n                ? \"Redigera objekt\"\n                : \"Lägg till nytt objekt\"}\n            </Typography>\n            <Grid container spacing=\"2rem\">\n              <Grid item xs={12}>\n                {/* TODO: Restrict to only be numerical */}\n                <TextField\n                  fullWidth\n                  label=\"SFB-nummer\"\n                  variant=\"outlined\"\n                  onChange={this.handleScpNumberChange}\n                  value={this.state.scpNumber || \"\"}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Namn\"\n                  variant=\"outlined\"\n                  onChange={this.handleNameChange}\n                  value={this.state.name || \"\"}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  fullWidth\n                  label=\"Beskrivning\"\n                  variant=\"outlined\"\n                  multiline\n                  rows={5}\n                  onChange={this.handleDescriptionChange}\n                  value={this.state.description || \"\"}\n                />\n              </Grid>\n              <Grid item xs={12}>\n                <Button variant=\"outlined\" onClick={this.save}>\n                  Spara\n                </Button>\n              </Grid>\n              <Grid item xs={12}>\n                <Box\n                  sx={{\n                    backgroundColor: \"rgba(255,0,0,.1)\",\n                    padding: \"1rem\",\n                    display: this.state.hasValidationErrors ? \"auto\" : \"none\",\n                  }}\n                >\n                  All fält måste fyllas i för att du ska kunna spara\n                </Box>\n                <Box\n                  sx={{\n                    backgroundColor: \"rgba(255,0,0,.1)\",\n                    padding: \"1rem\",\n                    display:\n                      this.state.submitStatus === \"SubmitFailed\"\n                        ? \"auto\"\n                        : \"none\",\n                  }}\n                >\n                  Något gick fel\n                </Box>\n                <Box\n                  sx={{\n                    backgroundColor: \"rgba(0,255,0,.1)\",\n                    padding: \"1rem\",\n                    display:\n                      this.state.submitStatus === \"SubmitSuccessful\"\n                        ? \"auto\"\n                        : \"none\",\n                  }}\n                >\n                  Objektet har sparats\n                </Box>\n              </Grid>\n            </Grid>\n          </Card>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default ScpForm;\n","import { Container } from \"@mui/system\";\nimport React from \"react\";\nimport ScpForm from \"../views/ScpForm\";\n\nclass AddScp extends React.Component<{}, {}> {\n  constructor(props: {}) {\n    super(props);\n  }\n\n  render(): JSX.Element {\n    return (\n      <Container sx={{ marginTop: \"2rem\" }}>\n        <ScpForm formType={{ tag: \"AddNewEntry\" }} />\n      </Container>\n    );\n  }\n}\n\nexport default AddScp;\n","import {\n  Box,\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CircularProgress,\n  Grid,\n  Typography,\n} from \"@mui/material\";\nimport React from \"react\";\nimport { ScpEntry } from \"../types/ScpEntry\";\nimport * as Api from \"../Api\";\nimport { Container } from \"@mui/system\";\nimport ScpForm from \"../views/ScpForm\";\n\ntype ExploreScpEntriesState =\n  | { tag: \"NotRequested\" }\n  | { tag: \"Loading\" }\n  | { tag: \"Loaded\"; entries: ScpEntryState[] }\n  | { tag: \"Error\"; error: Api.ApiError };\n\ntype ScpEntryState = { entry: ScpEntry; isBeingEdited: boolean };\n\nclass ExploreScpEntries extends React.Component<{}, ExploreScpEntriesState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = { tag: \"NotRequested\" };\n  }\n\n  componentDidMount() {\n    this.setState({ tag: \"Loading\" });\n\n    Api.getScpEntries().then((response) => {\n      if (response.tag === \"Success\") {\n        this.setState({\n          tag: \"Loaded\",\n          entries: response.payload.map((e) => ({\n            entry: e,\n            isBeingEdited: false,\n          })),\n        });\n      } else {\n        this.setState({\n          tag: \"Error\",\n          error: response.error,\n        });\n      }\n    });\n  }\n\n  render(): JSX.Element {\n    return (\n      <Container sx={{ marginTop: \"2rem\" }}>\n        {this.renderScpEntries(this.state)}\n      </Container>\n    );\n  }\n\n  private renderScpEntries = (\n    scpEntries: ExploreScpEntriesState\n  ): JSX.Element => {\n    switch (scpEntries.tag) {\n      case \"NotRequested\":\n        return <div>hej</div>;\n      case \"Loading\":\n        return (\n          <Box padding=\"1rem\">\n            <CircularProgress />\n          </Box>\n        );\n      case \"Loaded\":\n        if (scpEntries.entries.length === 0) {\n          return (\n            <Typography variant=\"h6\">\n              Det finns inga inlägg i registet ännu\n            </Typography>\n          );\n        } else {\n          return (\n            <Grid\n              container\n              spacing={{ xs: 2, md: 3 }}\n              sx={{ justifyContent: \"center\" }}\n            >\n              {scpEntries.entries.map(this.renderScpEntry)}\n            </Grid>\n          );\n        }\n      case \"Error\":\n        if (scpEntries.error === \"NoEntriesFound\") {\n          return (\n            <Typography variant=\"h6\">\n              Det finns inga SFBs i registet ännu\n            </Typography>\n          );\n        } else {\n          return (\n            <Box\n              sx={{\n                backgroundColor: \"rgba(255,0,0,.1)\",\n                padding: \"1rem\",\n              }}\n            >\n              <Typography variant=\"h6\">Något gick fel</Typography>\n            </Box>\n          );\n        }\n    }\n  };\n\n  private renderScpEntry = ({\n    entry,\n    isBeingEdited,\n  }: ScpEntryState): JSX.Element => {\n    if (isBeingEdited) {\n      return (\n        <React.Fragment key={entry._id}>\n          <Grid item xs={12}>\n            <ScpForm\n              formType={{ tag: \"UpdateExistingEntry\", entry: entry }}\n              onSubmitSuccessful={this.resetEditing}\n            />\n          </Grid>\n        </React.Fragment>\n      );\n    } else {\n      return (\n        <React.Fragment key={entry._id}>\n          <Grid item xs={12} md={8} lg={8}>\n            <Card variant=\"outlined\" sx={{ padding: \"1rem\" }}>\n              <CardContent>\n                <Typography\n                  sx={{ fontSize: 14 }}\n                  color=\"text.secondary\"\n                  gutterBottom\n                >\n                  {\"SFB-\" + entry.scpNumber}\n                </Typography>\n                <Typography variant=\"h5\" component=\"div\">\n                  {entry.name}\n                </Typography>\n                <Typography\n                  sx={{\n                    marginTop: \"1rem\",\n                    whiteSpace: \"pre-wrap\",\n                  }}\n                >\n                  {entry.description}\n                </Typography>\n              </CardContent>\n              <CardActions>\n                <Button\n                  size=\"small\"\n                  // TODO: If we dont have the entry id, we should not be inside this code path. Should be solved with a better state model.\n                  onClick={() => this.handleEditClicked(entry._id || \"\")}\n                >\n                  Redigera\n                </Button>\n                <Button\n                  size=\"small\"\n                  // TODO: If we dont have the entry id, we should not be inside this code path. Should be solved with a better state model.\n                  onClick={() => this.handleDeleteClicked(entry._id || \"\")}\n                >\n                  Ta bort\n                </Button>\n              </CardActions>\n            </Card>\n          </Grid>\n        </React.Fragment>\n      );\n    }\n  };\n\n  private resetEditing = (scpEntry: ScpEntry) => {\n    if (this.state.tag === \"Loaded\") {\n      this.setState({\n        tag: \"Loaded\",\n        entries: this.state.entries.map((e) =>\n          e.entry._id === scpEntry._id\n            ? {\n                entry: scpEntry,\n                isBeingEdited: false,\n              }\n            : e\n        ),\n      });\n    }\n  };\n\n  private handleEditClicked = (scpId: string) => {\n    if (this.state.tag === \"Loaded\") {\n      this.setState({\n        tag: \"Loaded\",\n        entries: this.state.entries.map((e) =>\n          e.entry._id === scpId\n            ? {\n                entry: e.entry,\n                isBeingEdited: true,\n              }\n            : e\n        ),\n      });\n    }\n  };\n\n  // TODO: The removal should be communicated to the user in a better way.\n  private handleDeleteClicked = (scpId: string) => {\n    Api.deleteScpEntry(scpId).then(() => {\n      if (this.state.tag === \"Loaded\") {\n        this.setState({\n          tag: \"Loaded\",\n          entries: this.state.entries.filter(\n            (scpEntryState) => scpEntryState.entry._id !== scpId\n          ),\n        });\n      }\n    });\n  };\n}\n\nexport default ExploreScpEntries;\n","import { Card, Grid, Link, Typography } from \"@mui/material\";\nimport { Container } from \"@mui/system\";\nimport React from \"react\";\n// item xs={8} md={8} lg={8}\nclass AboutScp extends React.Component {\n  render = () => {\n    return (\n      <Container\n        sx={{\n          marginTop: \"2rem\",\n          marginBottom: \"1rem\",\n        }}\n      >\n        <Grid container sx={{ justifyContent: \"center\" }}>\n          <Grid item xs={12} md={8} lg={8}>\n            <Card variant=\"outlined\" sx={{ padding: \"2rem\" }}>\n              <Typography variant=\"h5\" marginBottom=\"1rem\">\n                Om SFB\n              </Typography>\n              <Typography\n                variant=\"subtitle1\"\n                marginBottom=\"1rem\"\n                fontWeight=\"600\"\n              >\n                Uppdragsbeskrivning\n              </Typography>\n              <Typography variant=\"body1\" marginBottom=\"1rem\">\n                Stiftelsen verkar i hemlighet och över hela världen och verkar\n                utanför jurisdiktion, bemyndigad och anförtrodd av varje större\n                nationell regering med uppgiften att innehålla avvikande\n                föremål, enheter och fenomen. Många av dessa anomalier utgör ett\n                betydande hot mot den globala säkerheten genom att hota antingen\n                fysisk eller psykisk skada. Alla undergräver de naturlagar som\n                världens människor implicit litar på.\n              </Typography>\n              <Typography variant=\"body1\" marginBottom=\"1rem\">\n                Stiftelsen upprätthåller en omfattande databas med information\n                om anomalier som kräver särskilda inneslutningsprocedurer,\n                vanligen kallade \"SFBs\". Den primära databasen innehåller\n                sammanfattningar av sådana anomalier och nödprocedurer för att\n                upprätthålla eller återupprätta säker inneslutning i händelse av\n                ett inneslutningsbrott eller annan händelse.\n              </Typography>\n              <Typography variant=\"body1\" marginBottom=\"1rem\">\n                Stiftelsen verkar för att upprätthålla normalitet, så att den\n                globala civilbefolkningen kan leva och fortsätta med sina\n                dagliga liv utan rädsla, misstro eller tvivel i sin personliga\n                övertygelse, och för att upprätthålla mänskligt oberoende från\n                utomjordiskt, utomdimensionellt och annat utomnormalt\n                inflytande.\n              </Typography>\n              <Typography variant=\"body1\" marginBottom=\"1rem\">\n                Vårt uppdrag är tredelat:\n              </Typography>\n              <Typography\n                variant=\"subtitle1\"\n                marginBottom=\"1rem\"\n                fontWeight=\"600\"\n              >\n                Säkra\n              </Typography>\n              <Typography variant=\"body1\" marginBottom=\"1rem\">\n                Stiftelsen säkrar anomalier med målet att förhindra att de\n                hamnar i händerna på civila eller rivaliserande myndigheter,\n                genom omfattande observation och övervakning och genom att agera\n                för att avlyssna sådana anomalier så snart som möjligt.\n              </Typography>\n              <Typography\n                variant=\"subtitle1\"\n                marginBottom=\"1rem\"\n                fontWeight=\"600\"\n              >\n                Förvara\n              </Typography>\n              <Typography variant=\"body1\" marginBottom=\"1rem\">\n                Stiftelsen innehåller anomalier med målet att förhindra deras\n                inflytande eller effekter från att spridas, genom att antingen\n                flytta, dölja eller avveckla sådana anomalier eller genom att\n                undertrycka eller förhindra offentlig spridning av kunskap om\n                dessa.\n              </Typography>\n              <Typography\n                variant=\"subtitle1\"\n                marginBottom=\"1rem\"\n                fontWeight=\"600\"\n              >\n                Beskydda\n              </Typography>\n              <Typography variant=\"body1\" marginBottom=\"1rem\">\n                Stiftelsen skyddar mänskligheten från effekterna av sådana\n                anomalier såväl som själva anomalierna tills de antingen är helt\n                förstådda eller nya vetenskapsteorier kan utarbetas baserat på\n                deras egenskaper och beteende. Stiftelsen kan också neutralisera\n                eller förstöra anomalier som en sista utväg, om de bedöms vara\n                för farliga för att begränsas.\n              </Typography>\n              <Typography variant=\"body1\" marginBottom=\"1rem\">\n                Ytterligare information kommer att ha tillhandahållits när du\n                ansluter dig till oss i jakten på våra primära uppdrag.\n                Välkommen till stiftelsen, och lycka till.\n              </Typography>\n\n              <Typography variant=\"body1\" marginBottom=\"1rem\">\n                I den här webapplikationen kan du registrera objekt som fångats\n                in eller observerats.\n              </Typography>\n              <Link\n                href=\"https://scp-wiki.wikidot.com/about-the-scp-foundation\"\n                target=\"_blank\"\n                rel=\"noreferrer\"\n                marginBottom=\"1rem\"\n              >\n                Se vår internationella paraplyorganisation, SCP\n              </Link>\n            </Card>\n          </Grid>\n        </Grid>\n      </Container>\n    );\n  };\n}\n\nexport default AboutScp;\n","import React from \"react\";\nimport \"./App.css\";\n\nimport { Route, Routes } from \"react-router\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport Navbar from \"./views/Navbar\";\nimport AddScp from \"./pages/AddScp\";\nimport { Typography } from \"@mui/material\";\nimport ExploreScpEntries from \"./pages/ExploreScpEntries\";\nimport * as Api from \"./Api\";\nimport { Container } from \"@mui/system\";\nimport AboutScp from \"./pages/AboutScp\";\n\nfunction App() {\n  // This is just a workaround for easy testing with crudcrud.\n  // Every time the react app is refreshed, we get a new api key.\n  Api.loadApiKey().then((apiKeyRes) =>\n    apiKeyRes.tag === \"Success\"\n      ? Api.postTestData().then((testDataRes) =>\n          testDataRes.tag === \"Success\"\n            ? console.log(\"Posted test data\")\n            : console.log(\"Failed to post test data\")\n        )\n      : console.log(\"Failed to load a new API key\")\n  );\n\n  return (\n    <BrowserRouter basename=\"scp-app\">\n      <Navbar />\n      <Routes>\n        <Route path=\"/\" element={<AboutScp />}></Route>\n        <Route path=\"/explore\" element={<ExploreScpEntries />}></Route>\n        <Route path=\"/add\" element={<AddScp />}></Route>\n        <Route\n          path=\"*\"\n          element={\n            <Container>\n              <Typography variant=\"h5\" sx={{ padding: \"1rem\" }}>\n                Sidan kunde inte hittas\n              </Typography>\n            </Container>\n          }\n        ></Route>\n      </Routes>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}